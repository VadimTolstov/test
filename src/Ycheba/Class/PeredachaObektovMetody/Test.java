package Ycheba.Class.PeredachaObektovMetody;

// Простые типы данных передаются методам по значению

class Test {
    // Этот метод не может изменить значения аргументов,
// передаваемых ему при вызове
    void noChange(int i, int j) {
        i = i + j;
        j = -j;
    }

    static class CallByValue {
        public static void main(String args[]) {
            Test ob = new Test();
            int a = 15, b = 20;
            System.out.println("а и b перед вызовом: " +
                               a + " " + b);
            ob.noChange(a, b);
            System.out.println("а и b после вызова: " +
                               a + " " + b);
        }
    }
}
//Как видите, действия, выполняемые в теле метода noChange (), никак не
//влияют на значения переменных а и b в вызывающем методе


// Объекты передаются методам по ссылке
class Test2 {
    int a, b;

    Test2(int i, int j) {
        a = i;
        b = j;
    }

    // Передача объекта методу. Теперь переменные ob.a и ob.b
// объекта, используемого при вызове, также будут изменяться,
    void change(Test2 ob) {
        ob.a = ob.a + ob.b;
        ob.b = -ob.b;
    }
}

class CallByRef {
    public static void main(String args[]) {
        Test2 ob = new Test2(15, 20);
        System.out.println("ob.a и ob.b перед вызовом: " +
                           ob.a + " " + ob.b);
        ob.change(ob);
        System.out.println("ob.a и ob.b после вызова: " +
                           ob.a + " " + ob.b);
    }
}
//Как видите, в данном случае действия в методе change () оказывают
// влияние на объект, используемый в качестве аргумента этого метода

//ВОПРОС. Существует ли способ передачи простого типа по ссылке?
//ОТВЕТ. Явным образом этого сделать нельзя. Но в Java определен ряд классов,
//служащих оболочкой для простых типов. Это классы Double, Float, Byte,
//Short, Integer, Long и Character. Они не только позволяют передавать
//простые типы по ссылке, но и содержат ряд методов для манипулирования
//их значениями. Например, в классах — оболочках числовых типов содержатся
// методы, преобразующие двоичные значения в символьную строку, а также
//методы, выполняющие обратное преобразование.